import { defineStore } from 'pinia';

interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
}

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  token: string | null;
}

export const useAuthStore = defineStore('auth', {
  state: (): AuthState => ({
    user: null,
    isAuthenticated: false,
    token: null
  }),
  
  getters: {
    userInitials: (state) => {
      if (!state.user?.name) return '';
      
      const nameParts = state.user.name.split(' ');
      if (nameParts.length > 1) {
        return `${nameParts[0][0]}${nameParts[1][0]}`.toUpperCase();
      }
      
      return nameParts[0][0].toUpperCase();
    }
  },
  
  actions: {
    login(email: string, password: string) {
      // In a real app, you would make an API call here
      // This is just a simple example
      return new Promise<void>((resolve, reject) => {
        // Simulate API call
        setTimeout(() => {
          // Check if email and password match a user
          if (email === 'user@example.com' && password === 'password') {
            this.user = {
              id: '1',
              email: 'user@example.com',
              name: 'John Doe'
            };
            this.isAuthenticated = true;
            this.token = 'fake-jwt-token';
            resolve();
          } else {
            reject(new Error('Invalid email or password'));
          }
        }, 500);
      });
    },
    
    register(name: string, email: string, password: string) {
      // In a real app, you would make an API call here
      // This is just a simple example
      return new Promise<void>((resolve, reject) => {
        // Simulate API call
        setTimeout(() => {
          // Check if email is already taken
          if (email === 'user@example.com') {
            reject(new Error('Email already in use'));
            return;
          }
          
          this.user = {
            id: '2', // In a real app, this would be generated by the server
            email,
            name
          };
          this.isAuthenticated = true;
          this.token = 'fake-jwt-token';
          resolve();
        }, 500);
      });
    },
    
    logout() {
      this.user = null;
      this.isAuthenticated = false;
      this.token = null;
    },
    
    updateProfile(userData: Partial<User>) {
      if (this.user) {
        this.user = { ...this.user, ...userData };
      }
    },
    
    checkAuth() {
      // In a real app, you would validate the token with your API
      // This is just a simple example to check if a token exists
      return !!this.token;
    }
  },
  
  persist: {
    storage: process.client ? localStorage : null,
  },
});
