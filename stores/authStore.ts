import { defineStore } from 'pinia';
import { persistedState } from '~/plugins/pinia-persistence';
import { setSecureCookie, getCookie, deleteCookie, generateCSRFToken } from '../plugins/cookie-utils';
import { useCartStore } from './cartStore';
import { useFavoritesStore } from './favoritesStore';
import { useOrdersStore } from './ordersStore';
import { useProductStore } from './productStore';

interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  phone?: string;
}

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  token: string | null;
  csrfToken: string | null;
}

export const useAuthStore = defineStore('auth', {
  state: (): AuthState => ({
    user: null,
    isAuthenticated: false,
    token: null,
    csrfToken: null
  }),
  
  getters: {
    userInitials: (state) => {
      if (!state.user?.name) return '';
      
      const nameParts = state.user.name.split(' ');
      if (nameParts.length > 1) {
        return `${nameParts[0][0]}${nameParts[1][0]}`.toUpperCase();
      }
      
      return nameParts[0][0].toUpperCase();
    }
  },
  
  actions: {
    login(email: string, password: string) {
      // In a real app, you would make an API call here
      // This is just a simple example
      return new Promise<void>((resolve, reject) => {
        // Simulate API call
        setTimeout(() => {
          // Check if email and password match a user
          if (email === 'user@example.com' && password === 'password') {
            // Generate a user object
            const user = {
              id: '1',
              email: 'user@example.com',
              name: 'John Doe'
            };
            
            // Generate token and CSRF token
            const token = 'fake-jwt-token-' + Date.now();
            const csrfToken = generateCSRFToken();
            
            // Store in state
            this.user = user;
            this.isAuthenticated = true;
            this.token = token;
            this.csrfToken = csrfToken;
            
            // Store in secure cookies
            setSecureCookie('auth_token', token, 7); // 7 days expiry
            setSecureCookie('csrf_token', csrfToken, 7);
            setSecureCookie('user_id', user.id, 7);
            
            // Load user-specific data
            const cartStore = useCartStore();
            const favoritesStore = useFavoritesStore();
            const ordersStore = useOrdersStore();
            const productStore = useProductStore();
            
            cartStore.setUserId(user.id);
            favoritesStore.loadUserFavorites(user.id);
            ordersStore.loadUserOrders(user.id);
            productStore.setUserId(user.id);
            
            resolve();
          } else {
            reject(new Error('Invalid email or password'));
          }
        }, 500);
      });
    },
    
    register(name: string, email: string, password: string) {
      // In a real app, you would make an API call here
      // This is just a simple example
      return new Promise<void>((resolve, reject) => {
        // Simulate API call
        setTimeout(() => {
          // Check if email is already taken
          if (email === 'user@example.com') {
            reject(new Error('Email already in use'));
            return;
          }
          
          // Generate a user object
          const user = {
            id: '2', // In a real app, this would be generated by the server
            email,
            name
          };
          
          // Generate token and CSRF token
          const token = 'fake-jwt-token-' + Date.now();
          const csrfToken = generateCSRFToken();
          
          // Store in state
          this.user = user;
          this.isAuthenticated = true;
          this.token = token;
          this.csrfToken = csrfToken;
          
          // Store in secure cookies
          setSecureCookie('auth_token', token, 7); // 7 days expiry
          setSecureCookie('csrf_token', csrfToken, 7);
          setSecureCookie('user_id', user.id, 7);
          
          // Initialize user-specific data
          const cartStore = useCartStore();
          const favoritesStore = useFavoritesStore();
          const ordersStore = useOrdersStore();
          
          cartStore.setUserId(user.id);
          favoritesStore.loadUserFavorites(user.id);
          ordersStore.loadUserOrders(user.id);
          
          resolve();
        }, 500);
      });
    },
    
    logout() {
      // Clear auth state
      this.user = null;
      this.isAuthenticated = false;
      this.token = null;
      this.csrfToken = null;
      
      // Clear cookies
      deleteCookie('auth_token');
      deleteCookie('csrf_token');
      deleteCookie('user_id');
      
      // Clear user-specific data
      const cartStore = useCartStore();
      const favoritesStore = useFavoritesStore();
      const ordersStore = useOrdersStore();
      const productStore = useProductStore();
      
      cartStore.clearUserId();
      cartStore.clearCart();
      favoritesStore.clearFavorites();
      ordersStore.clearOrders();
      productStore.clearPurchasedProducts();
    },
    
    updateProfile(userData: Partial<User>) {
      if (this.user) {
        this.user = { ...this.user, ...userData };
      }
    },
    
    checkAuth() {
      // Check if we have a token in state
      if (this.token && this.isAuthenticated && this.user) {
        return true;
      }
      
      // If not, check cookies
      const token = getCookie('auth_token');
      const csrfToken = getCookie('csrf_token');
      const userId = getCookie('user_id');
      
      if (token && csrfToken && userId) {
        // In a real app, you would validate the token with your API
        // For now, we'll just restore the session from cookies
        this.token = token;
        this.csrfToken = csrfToken;
        this.isAuthenticated = true;
        
        // Restore user data (in a real app, you would fetch this from an API)
        this.user = {
          id: userId,
          email: userId === '1' ? 'user@example.com' : 'new@example.com',
          name: userId === '1' ? 'John Doe' : 'New User'
        };
        
        // Load user-specific data
        const cartStore = useCartStore();
        const favoritesStore = useFavoritesStore();
        const ordersStore = useOrdersStore();
        const productStore = useProductStore();
        
        cartStore.setUserId(userId);
        favoritesStore.loadUserFavorites(userId);
        ordersStore.loadUserOrders(userId);
        productStore.setUserId(userId);
        
        return true;
      }
      
      return false;
    }
  },
  
  persist: {
    storage: persistedState.localStorage,
    paths: ['user', 'isAuthenticated', 'token', 'csrfToken'],
  },
});
